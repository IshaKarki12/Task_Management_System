/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-05-08 17:54:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import model.Task;
import dao.TaskDAO;

public final class my_002dtasks_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("dao.TaskDAO");
    _jspx_imports_classes.add("model.Task");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    Integer userId = (Integer) session.getAttribute("currentUserID");
    if (userId == null) {
        response.sendRedirect("login.jsp");
        return;
    }

    TaskDAO taskDAO = new TaskDAO();
    List<Task> taskList = taskDAO.getTasksByUserId(userId);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>My Tasks</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../css/style.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');\r\n");
      out.write("\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Poppins', sans-serif;\r\n");
      out.write("            background: linear-gradient(to right, #e3f2fd, #ffffff);\r\n");
      out.write("            padding: 60px 20px;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h2 {\r\n");
      out.write("            font-size: 36px;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            color: #0d47a1;\r\n");
      out.write("            margin-bottom: 35px;\r\n");
      out.write("            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .task-table {\r\n");
      out.write("            width: 95%;\r\n");
      out.write("            max-width: 1100px;\r\n");
      out.write("            border-collapse: separate;\r\n");
      out.write("            border-spacing: 0 16px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        thead {\r\n");
      out.write("            background-color: #1565c0;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            padding: 18px 22px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            font-weight: 500;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        td {\r\n");
      out.write("            padding: 18px 22px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            background-color: #ffffff;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.06);\r\n");
      out.write("            transition: transform 0.2s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tbody tr {\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tbody tr:hover td {\r\n");
      out.write("            background-color: #e3f2fd;\r\n");
      out.write("            transform: scale(1.01);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn {\r\n");
      out.write("            padding: 10px 18px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            font-weight: 500;\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-edit {\r\n");
      out.write("            background-color: #1976d2;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-edit:hover {\r\n");
      out.write("            background-color: #0d47a1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-delete {\r\n");
      out.write("            background-color: #ef5350;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            margin-left: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-delete:hover {\r\n");
      out.write("            background-color: #c62828;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .message {\r\n");
      out.write("            background-color: #c8e6c9;\r\n");
      out.write("            color: #256029;\r\n");
      out.write("            border: 1px solid #a5d6a7;\r\n");
      out.write("            padding: 12px 24px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            margin-bottom: 30px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            box-shadow: 0 4px 12px rgba(0,0,0,0.05);\r\n");
      out.write("            font-size: 15px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back-link {\r\n");
      out.write("            margin-top: 40px;\r\n");
      out.write("            padding: 14px 28px;\r\n");
      out.write("            background-color: #263238;\r\n");
      out.write("            color: white;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            font-weight: 500;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("            box-shadow: 0 4px 12px rgba(0,0,0,0.2);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .back-link:hover {\r\n");
      out.write("            background-color: #37474f;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        td[colspan=\"4\"] {\r\n");
      out.write("            font-style: italic;\r\n");
      out.write("            color: #888;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <h2>📋 My Task List</h2>\r\n");
      out.write("\r\n");
      out.write("    ");
 String msg = request.getParameter("msg"); 
      out.write("\r\n");
      out.write("    ");
 if ("deleted".equals(msg)) { 
      out.write("\r\n");
      out.write("        <div class=\"message\">✅ Task deleted successfully!</div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <table class=\"task-table\">\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Task Name</th>\r\n");
      out.write("                <th>Status</th>\r\n");
      out.write("                <th>Due Date</th>\r\n");
      out.write("                <th>Actions</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("        ");
 for (Task task : taskList) { 
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( task.getTaskName() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( task.getStatus() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( task.getDueDate() );
      out.write("</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <a href=\"edit-task.jsp?taskId=");
      out.print( task.getTaskID() );
      out.write("\" class=\"btn btn-edit\">Edit</a>\r\n");
      out.write("                    <a href=\"../DeleteTaskServlet?taskId=");
      out.print( task.getTaskID() );
      out.write("\" class=\"btn btn-delete\" onclick=\"return confirm('Are you sure you want to delete this task?');\">Delete</a>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
 if (taskList.isEmpty()) { 
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"4\">No tasks found. You're all caught up! 🎉</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("    <a href=\"user-dashboard.jsp\" class=\"back-link\">⬅ Back to Dashboard</a>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
