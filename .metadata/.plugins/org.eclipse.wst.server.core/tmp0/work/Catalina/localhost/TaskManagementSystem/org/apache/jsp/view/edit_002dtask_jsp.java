/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-05-01 10:01:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model.Task;
import dao.TaskDAO;

public final class edit_002dtask_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("dao.TaskDAO");
    _jspx_imports_classes.add("model.Task");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String taskIdParam = request.getParameter("taskId");
    Task task = null;

    if (taskIdParam != null && !taskIdParam.isEmpty()) {
        try {
            int taskId = Integer.parseInt(taskIdParam);
            TaskDAO taskDAO = new TaskDAO();
            task = taskDAO.getTaskById(taskId); // make sure you have this method
        } catch (Exception e) {
            out.println("<h3>Error: Invalid task ID.</h3>");
            return;
        }
    }

    if (task == null) {
        out.println("<h3>Error: Task not found.</h3>");
        return;
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Edit Task</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../css/style.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        /* Add your CSS styling here */\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>Edit Task</h2>\r\n");
      out.write("        <form action=\"../EditTaskServlet\" method=\"post\">\r\n");
      out.write("            <!-- Hidden field to pass the taskID -->\r\n");
      out.write("            <input type=\"hidden\" name=\"taskID\" value=\"");
      out.print( task.getTaskID() );
      out.write("\">\r\n");
      out.write("            \r\n");
      out.write("            <label for=\"taskName\">Task Name</label>\r\n");
      out.write("            <input type=\"text\" id=\"taskName\" name=\"taskName\" value=\"");
      out.print( task.getTaskName() );
      out.write("\" required><br>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"taskDescription\">Task Description</label>\r\n");
      out.write("            <textarea id=\"taskDescription\" name=\"taskDescription\" rows=\"4\" required>");
      out.print( task.getTaskDescription() );
      out.write("</textarea><br>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"dueDate\">Due Date</label>\r\n");
      out.write("            <input type=\"date\" id=\"dueDate\" name=\"dueDate\" value=\"");
      out.print( task.getDueDate() );
      out.write("\" required><br>\r\n");
      out.write("\r\n");
      out.write("            <label for=\"status\">Status</label>\r\n");
      out.write("            <select name=\"status\" id=\"status\" required>\r\n");
      out.write("                <option value=\"Pending\" ");
      out.print( "Pending".equals(task.getStatus()) ? "selected" : "" );
      out.write(">Pending</option>\r\n");
      out.write("                <option value=\"In Progress\" ");
      out.print( "In Progress".equals(task.getStatus()) ? "selected" : "" );
      out.write(">In Progress</option>\r\n");
      out.write("                <option value=\"Completed\" ");
      out.print( "Completed".equals(task.getStatus()) ? "selected" : "" );
      out.write(">Completed</option>\r\n");
      out.write("            </select><br>\r\n");
      out.write("\r\n");
      out.write("            <input type=\"submit\" value=\"Update Task\">\r\n");
      out.write("        </form>\r\n");
      out.write("        \r\n");
      out.write("        <a href=\"my-tasks.jsp\" class=\"back-link\">Back to My Tasks</a>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
